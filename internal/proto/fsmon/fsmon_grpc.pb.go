// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: fsmon/fsmon.proto

package fsmon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FsMonIngestor_SendFsMon_FullMethodName       = "/fsmon.FsMonIngestor/SendFsMon"
	FsMonIngestor_SendFsMonBatch_FullMethodName  = "/fsmon.FsMonIngestor/SendFsMonBatch"
	FsMonIngestor_SendFsMonStream_FullMethodName = "/fsmon.FsMonIngestor/SendFsMonStream"
)

// FsMonIngestorClient is the client API for FsMonIngestor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FsMonIngestorClient interface {
	SendFsMon(ctx context.Context, in *FsMon, opts ...grpc.CallOption) (*Ack, error)
	SendFsMonBatch(ctx context.Context, in *FsMonBatch, opts ...grpc.CallOption) (*Ack, error)
	SendFsMonStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FsMonBatch, Ack], error)
}

type fsMonIngestorClient struct {
	cc grpc.ClientConnInterface
}

func NewFsMonIngestorClient(cc grpc.ClientConnInterface) FsMonIngestorClient {
	return &fsMonIngestorClient{cc}
}

func (c *fsMonIngestorClient) SendFsMon(ctx context.Context, in *FsMon, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, FsMonIngestor_SendFsMon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsMonIngestorClient) SendFsMonBatch(ctx context.Context, in *FsMonBatch, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, FsMonIngestor_SendFsMonBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsMonIngestorClient) SendFsMonStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FsMonBatch, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FsMonIngestor_ServiceDesc.Streams[0], FsMonIngestor_SendFsMonStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FsMonBatch, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FsMonIngestor_SendFsMonStreamClient = grpc.ClientStreamingClient[FsMonBatch, Ack]

// FsMonIngestorServer is the server API for FsMonIngestor service.
// All implementations must embed UnimplementedFsMonIngestorServer
// for forward compatibility.
type FsMonIngestorServer interface {
	SendFsMon(context.Context, *FsMon) (*Ack, error)
	SendFsMonBatch(context.Context, *FsMonBatch) (*Ack, error)
	SendFsMonStream(grpc.ClientStreamingServer[FsMonBatch, Ack]) error
	mustEmbedUnimplementedFsMonIngestorServer()
}

// UnimplementedFsMonIngestorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFsMonIngestorServer struct{}

func (UnimplementedFsMonIngestorServer) SendFsMon(context.Context, *FsMon) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFsMon not implemented")
}
func (UnimplementedFsMonIngestorServer) SendFsMonBatch(context.Context, *FsMonBatch) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFsMonBatch not implemented")
}
func (UnimplementedFsMonIngestorServer) SendFsMonStream(grpc.ClientStreamingServer[FsMonBatch, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method SendFsMonStream not implemented")
}
func (UnimplementedFsMonIngestorServer) mustEmbedUnimplementedFsMonIngestorServer() {}
func (UnimplementedFsMonIngestorServer) testEmbeddedByValue()                       {}

// UnsafeFsMonIngestorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FsMonIngestorServer will
// result in compilation errors.
type UnsafeFsMonIngestorServer interface {
	mustEmbedUnimplementedFsMonIngestorServer()
}

func RegisterFsMonIngestorServer(s grpc.ServiceRegistrar, srv FsMonIngestorServer) {
	// If the following call pancis, it indicates UnimplementedFsMonIngestorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FsMonIngestor_ServiceDesc, srv)
}

func _FsMonIngestor_SendFsMon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsMon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsMonIngestorServer).SendFsMon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsMonIngestor_SendFsMon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsMonIngestorServer).SendFsMon(ctx, req.(*FsMon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsMonIngestor_SendFsMonBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsMonBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsMonIngestorServer).SendFsMonBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsMonIngestor_SendFsMonBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsMonIngestorServer).SendFsMonBatch(ctx, req.(*FsMonBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsMonIngestor_SendFsMonStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FsMonIngestorServer).SendFsMonStream(&grpc.GenericServerStream[FsMonBatch, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FsMonIngestor_SendFsMonStreamServer = grpc.ClientStreamingServer[FsMonBatch, Ack]

// FsMonIngestor_ServiceDesc is the grpc.ServiceDesc for FsMonIngestor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FsMonIngestor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fsmon.FsMonIngestor",
	HandlerType: (*FsMonIngestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFsMon",
			Handler:    _FsMonIngestor_SendFsMon_Handler,
		},
		{
			MethodName: "SendFsMonBatch",
			Handler:    _FsMonIngestor_SendFsMonBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFsMonStream",
			Handler:       _FsMonIngestor_SendFsMonStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fsmon/fsmon.proto",
}
