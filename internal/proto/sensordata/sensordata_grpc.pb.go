// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sensordata/sensordata.proto

package sensordata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SensorIngestor_SendSensorData_FullMethodName   = "/sensordata.SensorIngestor/SendSensorData"
	SensorIngestor_SendSensorBatch_FullMethodName  = "/sensordata.SensorIngestor/SendSensorBatch"
	SensorIngestor_SendSensorStream_FullMethodName = "/sensordata.SensorIngestor/SendSensorStream"
)

// SensorIngestorClient is the client API for SensorIngestor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// This service is implemented by the ingestor and called by the sensor(s)
type SensorIngestorClient interface {
	SendSensorData(ctx context.Context, in *SensorData, opts ...grpc.CallOption) (*Ack, error)
	SendSensorBatch(ctx context.Context, in *SensorDataBatch, opts ...grpc.CallOption) (*Ack, error)
	SendSensorStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SensorDataBatch, Ack], error)
}

type sensorIngestorClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorIngestorClient(cc grpc.ClientConnInterface) SensorIngestorClient {
	return &sensorIngestorClient{cc}
}

func (c *sensorIngestorClient) SendSensorData(ctx context.Context, in *SensorData, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, SensorIngestor_SendSensorData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorIngestorClient) SendSensorBatch(ctx context.Context, in *SensorDataBatch, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, SensorIngestor_SendSensorBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorIngestorClient) SendSensorStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SensorDataBatch, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SensorIngestor_ServiceDesc.Streams[0], SensorIngestor_SendSensorStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SensorDataBatch, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SensorIngestor_SendSensorStreamClient = grpc.ClientStreamingClient[SensorDataBatch, Ack]

// SensorIngestorServer is the server API for SensorIngestor service.
// All implementations must embed UnimplementedSensorIngestorServer
// for forward compatibility.
//
// This service is implemented by the ingestor and called by the sensor(s)
type SensorIngestorServer interface {
	SendSensorData(context.Context, *SensorData) (*Ack, error)
	SendSensorBatch(context.Context, *SensorDataBatch) (*Ack, error)
	SendSensorStream(grpc.ClientStreamingServer[SensorDataBatch, Ack]) error
	mustEmbedUnimplementedSensorIngestorServer()
}

// UnimplementedSensorIngestorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSensorIngestorServer struct{}

func (UnimplementedSensorIngestorServer) SendSensorData(context.Context, *SensorData) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSensorData not implemented")
}
func (UnimplementedSensorIngestorServer) SendSensorBatch(context.Context, *SensorDataBatch) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSensorBatch not implemented")
}
func (UnimplementedSensorIngestorServer) SendSensorStream(grpc.ClientStreamingServer[SensorDataBatch, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method SendSensorStream not implemented")
}
func (UnimplementedSensorIngestorServer) mustEmbedUnimplementedSensorIngestorServer() {}
func (UnimplementedSensorIngestorServer) testEmbeddedByValue()                        {}

// UnsafeSensorIngestorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorIngestorServer will
// result in compilation errors.
type UnsafeSensorIngestorServer interface {
	mustEmbedUnimplementedSensorIngestorServer()
}

func RegisterSensorIngestorServer(s grpc.ServiceRegistrar, srv SensorIngestorServer) {
	// If the following call pancis, it indicates UnimplementedSensorIngestorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SensorIngestor_ServiceDesc, srv)
}

func _SensorIngestor_SendSensorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorIngestorServer).SendSensorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorIngestor_SendSensorData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorIngestorServer).SendSensorData(ctx, req.(*SensorData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorIngestor_SendSensorBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorDataBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorIngestorServer).SendSensorBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorIngestor_SendSensorBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorIngestorServer).SendSensorBatch(ctx, req.(*SensorDataBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorIngestor_SendSensorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SensorIngestorServer).SendSensorStream(&grpc.GenericServerStream[SensorDataBatch, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SensorIngestor_SendSensorStreamServer = grpc.ClientStreamingServer[SensorDataBatch, Ack]

// SensorIngestor_ServiceDesc is the grpc.ServiceDesc for SensorIngestor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorIngestor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensordata.SensorIngestor",
	HandlerType: (*SensorIngestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSensorData",
			Handler:    _SensorIngestor_SendSensorData_Handler,
		},
		{
			MethodName: "SendSensorBatch",
			Handler:    _SensorIngestor_SendSensorBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendSensorStream",
			Handler:       _SensorIngestor_SendSensorStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sensordata/sensordata.proto",
}
